package seedu.address.logic.parser;

import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;

import java.util.HashMap;
import java.util.stream.Stream;

import seedu.address.logic.commands.AddCommand;
import seedu.address.logic.parser.exceptions.ParseException;

/**
 * Parses input arguments and creates a new AddCommand object
 */
public class AddCommandParser implements Parser<AddCommand> {

    /**
     *  Parses the given {@code String} of arguments in the context of the AddCommand
     *  and returns an AddCommand object for execution.
     *  Command format: add /attibuteName1 attributeValue1 /attributeName2 attributeValue2 ...
     *  Examples:
     *  add
     *  add /Name Alice /Phone 123456 /address 123 ABC Street
     */
    public AddCommand parse(String args) throws ParseException {
        args = args.trim();
        if (args.length() == 1) {
            return new AddCommand(new HashMap<>());
        } else {
            String[] parts = args.split("/", -1);
            parts = removeFirstItemFromStringList(parts);
            requireValidParts(parts);
            HashMap<String, String> attributeMap = getAttributeHashMapFromAttributeStrings(parts);
            return new AddCommand(attributeMap);
        }

    }

    private String[] removeFirstItemFromStringList(String[] parts) {
        // Solution below generated by GitHub Copilot
        String[] newParts;
        newParts = new String[parts.length - 1];
        System.arraycopy(parts, 1, newParts, 0, parts.length - 1);
        return newParts;
    }

    private static HashMap<String, String> getAttributeHashMapFromAttributeStrings(String[] parts) {
        HashMap<String, String> attributeMap = new HashMap<>();
        for (int i = 0; i < parts.length; i++) {
            String[] attribute = separateAttributeNamesAndValues(parts[i]);
            String attributeName = attribute[0];
            String attributeValue = attribute[1];
            attributeMap.put(attributeName, attributeValue);
        }
        return attributeMap;
    }

    private void requireValidParts(String[] parts) throws ParseException {
        for (int i = 0; i < parts.length; i++) {
            if (separateAttributeNamesAndValues(parts[i]).length != 2) {
                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));
            }
        }
    }

    private static String[] separateAttributeNamesAndValues(String parts) {
        return parts.trim().split(" ", 2);
    }

    /**
     * Returns true if none of the prefixes contains empty {@code Optional} values in the given
     * {@code ArgumentMultimap}.
     */
    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {
        return Stream.of(prefixes).allMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());
    }

}
